"""
Django settings for bpg_project project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG =  int(os.environ.get('DJANGO_DEBUG',0))

ALLOWED_HOSTS = ([os.environ['WEBSITE_HOSTNAME']] if 'WEBSITE_HOSTNAME' in os.environ else []) + ['.usps.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',   
    'whitenoise.runserver_nostatic', 
    'django.contrib.staticfiles',        
    'bpg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Add whitenoise middleware after the security middleware                             
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bpg_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bpg_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
# Commenting below as Database is not required in this project
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

#Adding Whitenoise Compression to handle static files
STATICFILES_STORAGE = ('whitenoise.storage.CompressedStaticFilesStorage')

STATIC_URL = os.environ.get('DJANGO_STATIC_URL',"/static/")
STATICFILES_DIRS = [os.path.join(BASE_DIR,'bpg/static')]
STATIC_ROOT = os.path.join (BASE_DIR, os.environ.get('DJANGO_STATIC_ROOT',"static"))

# Set Environment Name
ENVIRONMENT = os.environ.get('BPG_ENVIRONMENT')
CLIENT_SECRET = os.environ.get('CLIENT_SECRET')
CLIENT_ID = os.environ.get('CLIENT_ID')
EXTENTION_USER_ID = os.environ.get('EXTENTION_USER_ID')
EXTENSION_USER_ID_FA_DEV=os.environ.get('EXTENSION_USER_ID_FA_DEV')
EXTENSION_USER_ID_FA_SIT=os.environ.get('EXTENSION_USER_ID_FA_SIT')
EXTENSION_USER_ID_FA_CAT=os.environ.get('EXTENSION_USER_ID_FA_CAT')
EXTENSION_USER_ID_FA_PROD=os.environ.get('EXTENSION_USER_ID_FA_PROD')
EXTENSION_USER_ID_ILERPT_DEV=os.environ.get('EXTENSION_USER_ID_ILERPT_DEV')
EXTENSION_USER_ID_ILERPT_SIT=os.environ.get('EXTENSION_USER_ID_ILERPT_SIT')
EXTENSION_USER_ID_ILERPT_CAT=os.environ.get('EXTENSION_USER_ID_ILERPT_CAT')
EXTENSION_USER_ID_ILERPT_PROD=os.environ.get('EXTENSION_USER_ID_ILERPT_PROD')
EXTENSION_USER_ID_STAF_DEV=os.environ.get('EXTENSION_USER_ID_STAF_DEV')
EXTENSION_USER_ID_STAF_SIT=os.environ.get('EXTENSION_USER_ID_STAF_SIT')
EXTENSION_USER_ID_STAF_CAT=os.environ.get('EXTENSION_USER_ID_STAF_CAT')
EXTENSION_USER_ID_STAF_PROD=os.environ.get('EXTENSION_USER_ID_STAF_PROD')
TENANT_ID=os.environ.get('TENANT_ID')
